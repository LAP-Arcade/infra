- name: "Ensure {{ files_persistent_drive }} exists"
  win_stat:
    path: "{{ files_persistent_drive }}"
  register: persistent_drive

- name: "Fail if {{ files_persistent_drive }} does not exist"
  fail:
    msg: "{{ files_persistent_drive }} does not exist"
  when: not persistent_drive.stat.exists

- set_fact:
    _files_symlinks_yml: >
      {% for symlink in files_persistent_symlinks %}

        {% if (symlink | type_debug) != "dict" %}
          {% if ":" in symlink %}

      - source: '{{ symlink }}'
        target: '{{ files_persistent_drive }}\{{ symlink | basename }}'

          {% else %}

      - source: '{{ ansible_user_dir }}\AppData\{{ symlink }}'
        target: '{{ files_persistent_drive }}\AppData\{{ symlink }}'

          {% endif %}

        {% else %} {# dict #}

          {% if ":" in symlink.source %}

      - source: '{{ symlink.source }}'

          {% else %}

      - source: '{{ ansible_user_dir }}\AppData\{{ symlink.source }}'

          {% endif %}
          {% if ":" in symlink.target %}

        target: '{{ symlink.target }}'

          {% else %}

        target: '{{ files_persistent_drive }}\{{ symlink.target }}'

          {% endif %}

        {% endif %}

      {% endfor %}


- set_fact:
    _files_symlinks: "{{ _files_symlinks_yml | from_yaml }}"

- name: Ensure symlinks source directories exist
  win_file:
    type: directory
    path: "{{ item.source }}"
  loop: "{{ _files_symlinks }}"
  when: "not '.' in (item.source | basename)"


# win_file variant
# Updates access and modification timestamps if file exists
# And will always trigger "changed"

# - name: Ensure symlinks source files exist
#   win_file:
#     path: "{{ item.source }}"
#     state: touch
#   loop: "{{ _files_symlinks }}"
#   register: _debug
#   when: "'.' in (item.source | basename)"

# win_shell variant, custom script based on win_file's source code
# Will not trigger "changed" if the file already exists, and will not update
# timestamps
- name: Ensure symlinks source files exist
  win_shell: |
    if (-not (Test-Path -LiteralPath "{{ item.source }}")) {
      Write-Output $null | Out-File -LiteralPath "{{ item.source }}"
      echo changed
    }
  loop: "{{ _files_symlinks }}"
  changed_when: "'changed' in _files_symlinks_result.stdout_lines"
  register: _files_symlinks_result
  when: "'.' in (item.source | basename)"


- name: Create symlinks
  win_shell: |
    if (
      (Test-Path -LiteralPath "{{ item.source }}") -and
      ((Get-Item -LiteralPath "{{ item.source }}").LinkType -ne "SymbolicLink")
    ) {
      Move-Item -Path "{{ item.source }}" -Destination "{{ item.target }}"
      echo changed
    }
    if (-not (Test-Path -LiteralPath "{{ item.source }}")) {
      New-Item -ItemType SymbolicLink -Path "{{ item.source }}" -Value "{{ item.target }}"
      echo changed
    }
  loop: "{{ _files_symlinks }}"
  register: _files_symlinks_result
  changed_when: "'changed' in _files_symlinks_result.stdout_lines"

- name: Create directory structure on persistent drive
  win_file:
    state: directory
    path: '{{ files_persistent_drive }}\{{ item }}'
  loop:
    - AppData\Local
    - AppData\Roaming
    - Downloads
    - Programs
    - Scripts

- name: Write startup.bat
  win_template:
    src: startup.bat.j2
    dest: '{{ files_persistent_drive }}\startup.bat'

- name: Create uwfmgr script
  win_copy:
    src: filter.bat
    dest: '{{ files_persistent_drive }}\Scripts\filter.bat'

- name: Create uwfmgr shortcuts in Scripts folder
  win_shortcut:
    src: '{{ files_persistent_drive }}\Scripts\filter.bat'
    dest: '{{ files_persistent_drive }}\Scripts\{{ item | title }} filter.lnk'
    arguments: "{{ item }}"
  loop:
    - enable
    - disable

- name: Copy ufwmgr scripts to the desktop
  win_copy:
    src: '{{ files_persistent_drive }}\Scripts\{{ item }} filter.lnk'
    dest: '{{ ansible_user_dir }}\Desktop\{{ item }} filter.lnk'
    remote_src: true
  loop:
    - Enable
    - Disable
